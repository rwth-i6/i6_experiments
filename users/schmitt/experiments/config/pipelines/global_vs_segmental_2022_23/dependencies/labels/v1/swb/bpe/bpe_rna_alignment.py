from i6_experiments.users.schmitt.experiments.config.pipelines.global_vs_segmental_2022_23.dependencies.labels.v1.swb.bpe.bpe import BPE
from i6_experiments.users.schmitt.experiments.config.pipelines.global_vs_segmental_2022_23.dependencies.labels.v1.swb.general import SegmentalLabelDefinition, LabelDefinition
from i6_experiments.users.schmitt.experiments.config.pipelines.global_vs_segmental_2022_23.dependencies.general.rasr.formats import RasrFormats
from i6_experiments.users.schmitt.experiments.config.pipelines.global_vs_segmental_2022_23.dependencies.general.hyperparameters import SegmentalModelHyperparameters
from i6_experiments.users.schmitt.experiments.config.pipelines.global_vs_segmental_2022_23.dependencies.corpora.swb import SWBSprintCorpora
from i6_experiments.users.schmitt.rasr.convert import BPEJSONVocabToRasrFormatsJob

from typing import Dict
import os

from sisyphus import *


class RNABPE(BPE, SegmentalLabelDefinition):
  """
  This alignment is generated by the RNA full-sum model from Albert's "Improved Transducer".
  See: https://github.com/rwth-i6/returnn-experiments/tree/master/2020-rnn-transducer.
  """
  @property
  def alias(self) -> str:
    return "rna-bpe"

  @property
  def alignment_paths(self) -> Dict[str, Path]:
    alignment_paths = {
      "train": Path(
        "/work/asr3/zeyer/schmitt/sisyphus_work_dirs/merboldt_swb_transducer/rna-tf2.blank0.enc6l-grow2l.scratch-lm.rdrop02.lm1-1024.attwb5-drop02.l2_1e_4.mlr50.epoch-150.swap.data-train.hdf",
        cached=True),
      "devtrain": Path(
        "/work/asr3/zeyer/schmitt/sisyphus_work_dirs/merboldt_swb_transducer/rna-tf2.blank0.enc6l-grow2l.scratch-lm.rdrop02.lm1-1024.attwb5-drop02.l2_1e_4.mlr50.epoch-150.swap.data-train.hdf",
        cached=True),
      "cv": Path(
        "/work/asr3/zeyer/schmitt/sisyphus_work_dirs/merboldt_swb_transducer/rna-tf2.blank0.enc6l-grow2l.scratch-lm.rdrop02.lm1-1024.attwb5-drop02.l2_1e_4.mlr50.epoch-150.swap.data-dev.hdf",
        cached=True)}

    alignment_paths["cv300"] = alignment_paths["cv"]
    alignment_paths["cv_test"] = alignment_paths["cv"]

    return alignment_paths

  @property
  def train_segment_paths(self) -> Dict[str, Path]:
    return LabelDefinition.get_default_train_segment_paths()

  @property
  def realignment_segment_paths(self) -> Dict[str, Path]:
    segment_paths = {k: v for k, v in self.segment_paths.items()}
    segment_paths["train"] = Path(os.path.join(SWBSprintCorpora.realignment_train_segment_paths_dir, "bpe_no_silence"))
    return segment_paths

  @property
  def model_hyperparameters(self) -> SegmentalModelHyperparameters:
    return SegmentalModelHyperparameters(
      sos_idx=0, blank_idx=1030, target_num_labels=1031, sil_idx=None)

  @property
  def rasr_format_paths(self) -> RasrFormats:
    json_to_rasr_job = BPEJSONVocabToRasrFormatsJob(
      self.vocab_path, blank_idx=self.model_hyperparameters.blank_idx)

    return RasrFormats(
      state_tying_path=json_to_rasr_job.out_state_tying,
      allophone_path=json_to_rasr_job.out_allophones,
      label_file_path=json_to_rasr_job.out_rasr_label_file,
      decoding_lexicon_path=Path("/work/asr3/zeyer/schmitt/sisyphus_work_dirs/swb1/dependencies/bpe/irie/bpe-with-sil_lexicon"),
      realignment_lexicon_path=Path("/work/asr3/zeyer/schmitt/sisyphus_work_dirs/swb1/dependencies/bpe/irie/my_new_lex"),
      blank_allophone_state_idx=4119
    )

  @property
  def vocab_path(self) -> Path:
    vocab_path = Path('/work/asr3/irie/data/switchboard/subword_clean/ready/vocab.swbd_clean.bpe_code_1k')
    return vocab_path

  @property
  def vocab_dict(self) -> Dict[str, Path]:
    return {
      "vocab_file": self.vocab_path,
      "bpe_file": self.bpe_codes_path}
